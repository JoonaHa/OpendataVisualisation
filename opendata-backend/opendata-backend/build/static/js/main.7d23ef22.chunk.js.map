{"version":3,"sources":["services/sensors.js","components/Sensor.js","components/AllSensor.js","App.js","index.js"],"names":["sensors","axios","get","then","response","data","findmin","reduce","prev","curr","y","findmax","SensorsChart","_ref","width","height","react_default","a","createElement","es","xType","yDomain","y0","map","obj","Object","objectSpread","label","Math","round","toString","labelAnchorX","sensor1","values","forEach","s","d","Date","date","push","x","getHours","sensor2","key","sensor3","sensor4","SensorLines","items","orientation","App","_useState","useState","_useState2","slicedToArray","currentSensor","setCurrentSensor","_useState3","_useState4","allSensors","setAllsensors","useEffect","sensorService","ser","Number","Sensor","AllSensor","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.7d23ef22.chunk.js","sourcesContent":["import axios from 'axios'\nconst currentUrl = '/api/sensors/current'\nconst allUrl = '/api/sensors'\n\n\nconst getCurrent = () => {\n  const request = axios.get(currentUrl)\n  return request.then(response => response.data)\n}\n\nconst getAll = () => {\n  const request = axios.get(allUrl)\n  \n  return request.then(response => response.data)\n}\n\n\n\nexport default { getCurrent, getAll }","import React from 'react'\nimport 'react-vis/dist/style.css';\nimport {\n  XYPlot, \n  VerticalBarSeries, \n  LabelSeries, \n  YAxis, \n  HorizontalGridLines,\n  XAxis} \n  from 'react-vis';\n\nconst findmin = (data) => {\n  return data.reduce(function(prev, curr) {\n    return prev.y < curr.y ? prev : curr\n  })\n}\n\nconst findmax = (data) => {\n  return data.reduce(function(prev, curr) {\n    return prev.y > curr.y ? prev : curr\n  })\n}\n\nconst SensorsChart = ({ data , width , height}) => {\n\n \n\n    return (\n        <XYPlot \n          xType=\"ordinal\" \n          width={width} \n          height={height}>\n          <HorizontalGridLines/>\n          <XAxis/>\n          <YAxis\n            yDomain={[findmin(data).y, findmax(data).y]}\n            y0={findmin(data).y}/>\n          <VerticalBarSeries\n              data={data}\n          />\n          <LabelSeries\n            data={data.map(obj => {\n              return { ...obj, label: Math.round(obj.y).toString() }\n              })}\n            labelAnchorX=\"middle\"\n                />\n        </XYPlot>\n\n    )\n}\n\nexport default SensorsChart","import React from 'react'\nimport {\n    XYPlot, \n    YAxis, \n    DiscreteColorLegend,\n    LineMarkSeries ,\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis} \n    from 'react-vis';\n\n\n    const sensor1 = (data) => {\n    var values = []\n    data.forEach(s => {\n      var d= new Date(s.date) \n      values.push(\n        {x: d.getHours(), y:s.sensor1}\n        )\n    });\n    return values\n  }\n\n  const sensor2 = (data,key) => {\n    var values = []\n    data.forEach(s => {\n      var d= new Date(s.date) \n      values.push(\n        {x: d.getHours(), y:s.sensor2}\n        )\n    });\n    return values\n  }\n\n  const sensor3 = (data,key) => {\n    var values = []\n    data.forEach(s => {\n      var d= new Date(s.date) \n      values.push(\n        {x: d.getHours(), y:s.sensor3}\n        )\n    });\n    return values\n  }\n\n  const sensor4 = (data,key) => {\n    var values = []\n    data.forEach(s => {\n      var d= new Date(s.date) \n      values.push(\n        {x: d.getHours(), y:s.sensor4}\n        )\n    });\n    return values\n  }\n\n\nconst SensorLines = ({ data , width , height}) => {\n\n\n    return(\n        <div>\n            <DiscreteColorLegend items={['Sensor 1', 'Sensor 2', 'Sensor 3', 'Sensor 4']} orientation='horizontal'/>\n        <XYPlot width={width} height={height} yDomain={[-50, 300]}><XAxis/><YAxis/>\n          <HorizontalGridLines />\n          <VerticalGridLines />\n     \n     \n       <LineMarkSeries data={sensor1(data)} />  \n       <LineMarkSeries data={sensor2(data)} /> \n       <LineMarkSeries data={sensor3(data)} /> \n       <LineMarkSeries data={sensor4(data)} />\n       \n     \n     \n     </XYPlot>;\n      </div>\n    )\n\n}\n\nexport default SensorLines","import React, { useState, useEffect, } from 'react'\nimport './App.css'\nimport sensorService from './services/sensors'\nimport Sensor from './components/Sensor'\nimport Sensors from './components/AllSensor'\nconst App = () => {\n  const [currentSensor, setCurrentSensor] = useState([])\n  const [allSensors, setAllsensors] = useState([])\n  \n  useEffect(() => {\n    sensorService.getCurrent().then(ser =>\n      setCurrentSensor( ser )\n    )\n      \n  }, [])\n\n  useEffect(() => {\n    sensorService.getAll().then(sensors =>\n      setAllsensors(sensors)\n\n    )\n  }, [])\n\n  const data= [\n    {\n      y:Number(currentSensor.sensor1),\n      x: 'sensor 1'\n    },\n    {\n      y:Number(currentSensor.sensor2),\n      x: 'sensor 2'\n    },\n    {\n      y:Number(currentSensor.sensor3),\n      x: 'sensor 3'\n    },\n    {\n      y:Number(currentSensor.sensor4),\n      x: 'sensor 4'\n    }\n  ]\n \n\n\n\n  \n  \n    return (\n     <div>\n       <h1>Some sensor data</h1>\n       <div>\n       <Sensor data={data} width={500} height={300}/>\n     </div>\n        <Sensors data={allSensors} width={600} height={300}/>\n     </div>\n    );\n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}